stages:
  - linting
  - pages

.env_setup:
  before_script:
# install pyenv and python versions
    - if [[ -z "${PYENV_DIR}" ]]; then export PYENV_DIR=${HOME}/.pyenv; fi 
    - export PYENV_ROOT="${PYENV_DIR}" && export PATH="$PYENV_ROOT/bin:$PATH" && export TMPDIR="$PYENV_ROOT/.pip-tmp"
    - if ! command -v pyenv; then rm -rf ${PYENV_DIR} || true; git clone https://github.com/pyenv/pyenv.git ${PYENV_DIR}; else cd ${PYENV_DIR}; git pull; cd -; eval "$(pyenv init --path)";  fi
    - pyenv local | xargs -L1 pyenv install -s
    - which python
#   install poetry
    - curl -sSL https://install.python-poetry.org | python -
#   add poetry install path to PATH
    - export PATH="$HOME/.local/bin:${PATH}"
# update poetry, configure, and install tox
    - poetry self update
    - poetry config virtualenvs.in-project true; poetry config cache-dir ${PYENV_DIR}/.poetry-cache;
    - poetry config --list

linting:
    stage: linting
    extends: .env_setup
    rules:
      - if: $CI_COMMIT_TAG
        when: never 
      - if: $CI_COMMIT_BRANCH == "public"
        when: never
      - if: $CI_COMMIT_BRANCH == "nist-pages"
        when: never
      - when: always
    retry: 2
    script:
      - poetry install
      - poetry run isort . --check-only
      - poetry run black --check .
      - poetry run ruff check .
    needs: []

pages:
  stage: pages
  script:
    - poetry run build_docs.sh
    - mkdir -p public && rsync -avr _build/ public/
  extends: .env_setup
  rules:
    - if: $CI_COMMIT_TAG
      when: never 
    - when: always
  artifacts:
    paths:
      - public
